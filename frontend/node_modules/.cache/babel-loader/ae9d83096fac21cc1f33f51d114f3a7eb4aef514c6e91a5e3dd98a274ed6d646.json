{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\TheSyriCoProjects\\\\VoiceAI\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    if (token && savedUser) {\n      try {\n        const userData = JSON.parse(savedUser);\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Verify token is still valid\n        authAPI.getProfile().then(response => {\n          setUser(response.data);\n          localStorage.setItem('user', JSON.stringify(response.data));\n        }).catch(() => {\n          // Token invalid, clear everything\n          logout();\n        }).finally(() => {\n          setLoading(false);\n        });\n      } catch (error) {\n        logout();\n        setLoading(false);\n      }\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(credentials);\n      console.log('Login response:', response.data); // Debug log\n\n      const {\n        token,\n        user: userData\n      } = response.data;\n\n      // Ensure userData is a valid object\n      if (typeof userData === 'object' && userData !== null && !Array.isArray(userData)) {\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        setUser(userData);\n        setIsAuthenticated(true);\n      } else {\n        throw new Error('Invalid user data received from server');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response2;\n      let message = 'Login failed';\n      console.log('Login error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data); // Debug log\n\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && _error$response2.data) {\n        const errorData = error.response.data;\n\n        // Handle different error response formats\n        if (typeof errorData === 'string') {\n          message = errorData;\n        } else if (errorData.detail) {\n          message = errorData.detail;\n        } else if (errorData.message) {\n          message = errorData.message;\n        } else if (Array.isArray(errorData) && errorData.length > 0) {\n          // Handle validation errors array\n          message = errorData[0].msg || errorData[0].message || 'Validation error';\n        } else if (errorData.msg) {\n          message = errorData.msg;\n        } else {\n          message = 'Login failed';\n        }\n      }\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const response = await authAPI.register(userData);\n      const {\n        token,\n        user: newUser\n      } = response.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      setUser(newUser);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3;\n      let message = 'Registration failed';\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && _error$response3.data) {\n        const errorData = error.response.data;\n\n        // Handle different error response formats\n        if (typeof errorData === 'string') {\n          message = errorData;\n        } else if (errorData.detail) {\n          message = errorData.detail;\n        } else if (errorData.message) {\n          message = errorData.message;\n        } else if (Array.isArray(errorData) && errorData.length > 0) {\n          // Handle validation errors array\n          message = errorData[0].msg || errorData[0].message || 'Validation error';\n        } else if (errorData.msg) {\n          message = errorData.msg;\n        } else {\n          message = 'Registration failed';\n        }\n      }\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","token","localStorage","getItem","savedUser","userData","JSON","parse","getProfile","then","response","data","setItem","stringify","catch","logout","finally","error","login","credentials","console","log","Array","isArray","success","_error$response","_error$response2","message","errorData","detail","length","msg","register","newUser","_error$response3","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/TheSyriCoProjects/VoiceAI/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Check if user is logged in on app start\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        const savedUser = localStorage.getItem('user');\r\n\r\n        if (token && savedUser) {\r\n            try {\r\n                const userData = JSON.parse(savedUser);\r\n                setUser(userData);\r\n                setIsAuthenticated(true);\r\n\r\n                // Verify token is still valid\r\n                authAPI.getProfile()\r\n                    .then(response => {\r\n                        setUser(response.data);\r\n                        localStorage.setItem('user', JSON.stringify(response.data));\r\n                    })\r\n                    .catch(() => {\r\n                        // Token invalid, clear everything\r\n                        logout();\r\n                    })\r\n                    .finally(() => {\r\n                        setLoading(false);\r\n                    });\r\n            } catch (error) {\r\n                logout();\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const login = async (credentials) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await authAPI.login(credentials);\r\n            console.log('Login response:', response.data); // Debug log\r\n            \r\n            const { token, user: userData } = response.data;\r\n            \r\n            // Ensure userData is a valid object\r\n            if (typeof userData === 'object' && userData !== null && !Array.isArray(userData)) {\r\n                localStorage.setItem('token', token);\r\n                localStorage.setItem('user', JSON.stringify(userData));\r\n                \r\n                setUser(userData);\r\n                setIsAuthenticated(true);\r\n            } else {\r\n                throw new Error('Invalid user data received from server');\r\n            }\r\n\r\n            return { success: true };\r\n        } catch (error) {\r\n            let message = 'Login failed';\r\n\r\n            console.log('Login error:', error.response?.data); // Debug log\r\n\r\n            if (error.response?.data) {\r\n                const errorData = error.response.data;\r\n\r\n                // Handle different error response formats\r\n                if (typeof errorData === 'string') {\r\n                    message = errorData;\r\n                } else if (errorData.detail) {\r\n                    message = errorData.detail;\r\n                } else if (errorData.message) {\r\n                    message = errorData.message;\r\n                } else if (Array.isArray(errorData) && errorData.length > 0) {\r\n                    // Handle validation errors array\r\n                    message = errorData[0].msg || errorData[0].message || 'Validation error';\r\n                } else if (errorData.msg) {\r\n                    message = errorData.msg;\r\n                } else {\r\n                    message = 'Login failed';\r\n                }\r\n            }\r\n\r\n            return { success: false, error: message };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await authAPI.register(userData);\r\n            const { token, user: newUser } = response.data;\r\n\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(newUser));\r\n\r\n            setUser(newUser);\r\n            setIsAuthenticated(true);\r\n\r\n            return { success: true };\r\n        } catch (error) {\r\n            let message = 'Registration failed';\r\n\r\n            if (error.response?.data) {\r\n                const errorData = error.response.data;\r\n\r\n                // Handle different error response formats\r\n                if (typeof errorData === 'string') {\r\n                    message = errorData;\r\n                } else if (errorData.detail) {\r\n                    message = errorData.detail;\r\n                } else if (errorData.message) {\r\n                    message = errorData.message;\r\n                } else if (Array.isArray(errorData) && errorData.length > 0) {\r\n                    // Handle validation errors array\r\n                    message = errorData[0].msg || errorData[0].message || 'Validation error';\r\n                } else if (errorData.msg) {\r\n                    message = errorData.msg;\r\n                } else {\r\n                    message = 'Registration failed';\r\n                }\r\n            }\r\n\r\n            return { success: false, error: message };\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        try {\r\n            await authAPI.logout();\r\n        } catch (error) {\r\n            console.error('Logout error:', error);\r\n        } finally {\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n        }\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMkB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,SAAS,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE9C,IAAIF,KAAK,IAAIG,SAAS,EAAE;MACpB,IAAI;QACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,SAAS,CAAC;QACtCR,OAAO,CAACS,QAAQ,CAAC;QACjBP,kBAAkB,CAAC,IAAI,CAAC;;QAExB;QACAd,OAAO,CAACwB,UAAU,CAAC,CAAC,CACfC,IAAI,CAACC,QAAQ,IAAI;UACdd,OAAO,CAACc,QAAQ,CAACC,IAAI,CAAC;UACtBT,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACH,QAAQ,CAACC,IAAI,CAAC,CAAC;QAC/D,CAAC,CAAC,CACDG,KAAK,CAAC,MAAM;UACT;UACAC,MAAM,CAAC,CAAC;QACZ,CAAC,CAAC,CACDC,OAAO,CAAC,MAAM;UACXhB,UAAU,CAAC,KAAK,CAAC;QACrB,CAAC,CAAC;MACV,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZF,MAAM,CAAC,CAAC;QACRf,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC,MAAM;MACHA,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,KAAK,GAAG,MAAOC,WAAW,IAAK;IACjC,IAAI;MACAnB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMU,QAAQ,GAAG,MAAM1B,OAAO,CAACkC,KAAK,CAACC,WAAW,CAAC;MACjDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEX,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;;MAE/C,MAAM;QAAEV,KAAK;QAAEN,IAAI,EAAEU;MAAS,CAAC,GAAGK,QAAQ,CAACC,IAAI;;MAE/C;MACA,IAAI,OAAON,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,IAAI,CAACiB,KAAK,CAACC,OAAO,CAAClB,QAAQ,CAAC,EAAE;QAC/EH,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;QACpCC,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACR,QAAQ,CAAC,CAAC;QAEtDT,OAAO,CAACS,QAAQ,CAAC;QACjBP,kBAAkB,CAAC,IAAI,CAAC;MAC5B,CAAC,MAAM;QACH,MAAM,IAAIP,KAAK,CAAC,wCAAwC,CAAC;MAC7D;MAEA,OAAO;QAAEiC,OAAO,EAAE;MAAK,CAAC;IAC5B,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA,IAAAQ,eAAA,EAAAC,gBAAA;MACZ,IAAIC,OAAO,GAAG,cAAc;MAE5BP,OAAO,CAACC,GAAG,CAAC,cAAc,GAAAI,eAAA,GAAER,KAAK,CAACP,QAAQ,cAAAe,eAAA,uBAAdA,eAAA,CAAgBd,IAAI,CAAC,CAAC,CAAC;;MAEnD,KAAAe,gBAAA,GAAIT,KAAK,CAACP,QAAQ,cAAAgB,gBAAA,eAAdA,gBAAA,CAAgBf,IAAI,EAAE;QACtB,MAAMiB,SAAS,GAAGX,KAAK,CAACP,QAAQ,CAACC,IAAI;;QAErC;QACA,IAAI,OAAOiB,SAAS,KAAK,QAAQ,EAAE;UAC/BD,OAAO,GAAGC,SAAS;QACvB,CAAC,MAAM,IAAIA,SAAS,CAACC,MAAM,EAAE;UACzBF,OAAO,GAAGC,SAAS,CAACC,MAAM;QAC9B,CAAC,MAAM,IAAID,SAAS,CAACD,OAAO,EAAE;UAC1BA,OAAO,GAAGC,SAAS,CAACD,OAAO;QAC/B,CAAC,MAAM,IAAIL,KAAK,CAACC,OAAO,CAACK,SAAS,CAAC,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;UACzD;UACAH,OAAO,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACG,GAAG,IAAIH,SAAS,CAAC,CAAC,CAAC,CAACD,OAAO,IAAI,kBAAkB;QAC5E,CAAC,MAAM,IAAIC,SAAS,CAACG,GAAG,EAAE;UACtBJ,OAAO,GAAGC,SAAS,CAACG,GAAG;QAC3B,CAAC,MAAM;UACHJ,OAAO,GAAG,cAAc;QAC5B;MACJ;MAEA,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEP,KAAK,EAAEU;MAAQ,CAAC;IAC7C,CAAC,SAAS;MACN3B,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAMgC,QAAQ,GAAG,MAAO3B,QAAQ,IAAK;IACjC,IAAI;MACAL,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMU,QAAQ,GAAG,MAAM1B,OAAO,CAACgD,QAAQ,CAAC3B,QAAQ,CAAC;MACjD,MAAM;QAAEJ,KAAK;QAAEN,IAAI,EAAEsC;MAAQ,CAAC,GAAGvB,QAAQ,CAACC,IAAI;MAE9CT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;MACpCC,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACoB,OAAO,CAAC,CAAC;MAErDrC,OAAO,CAACqC,OAAO,CAAC;MAChBnC,kBAAkB,CAAC,IAAI,CAAC;MAExB,OAAO;QAAE0B,OAAO,EAAE;MAAK,CAAC;IAC5B,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA,IAAAiB,gBAAA;MACZ,IAAIP,OAAO,GAAG,qBAAqB;MAEnC,KAAAO,gBAAA,GAAIjB,KAAK,CAACP,QAAQ,cAAAwB,gBAAA,eAAdA,gBAAA,CAAgBvB,IAAI,EAAE;QACtB,MAAMiB,SAAS,GAAGX,KAAK,CAACP,QAAQ,CAACC,IAAI;;QAErC;QACA,IAAI,OAAOiB,SAAS,KAAK,QAAQ,EAAE;UAC/BD,OAAO,GAAGC,SAAS;QACvB,CAAC,MAAM,IAAIA,SAAS,CAACC,MAAM,EAAE;UACzBF,OAAO,GAAGC,SAAS,CAACC,MAAM;QAC9B,CAAC,MAAM,IAAID,SAAS,CAACD,OAAO,EAAE;UAC1BA,OAAO,GAAGC,SAAS,CAACD,OAAO;QAC/B,CAAC,MAAM,IAAIL,KAAK,CAACC,OAAO,CAACK,SAAS,CAAC,IAAIA,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;UACzD;UACAH,OAAO,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACG,GAAG,IAAIH,SAAS,CAAC,CAAC,CAAC,CAACD,OAAO,IAAI,kBAAkB;QAC5E,CAAC,MAAM,IAAIC,SAAS,CAACG,GAAG,EAAE;UACtBJ,OAAO,GAAGC,SAAS,CAACG,GAAG;QAC3B,CAAC,MAAM;UACHJ,OAAO,GAAG,qBAAqB;QACnC;MACJ;MAEA,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEP,KAAK,EAAEU;MAAQ,CAAC;IAC7C,CAAC,SAAS;MACN3B,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,MAAMe,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAI;MACA,MAAM/B,OAAO,CAAC+B,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZG,OAAO,CAACH,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACzC,CAAC,SAAS;MACNf,YAAY,CAACiC,UAAU,CAAC,OAAO,CAAC;MAChCjC,YAAY,CAACiC,UAAU,CAAC,MAAM,CAAC;MAC/BvC,OAAO,CAAC,IAAI,CAAC;MACbE,kBAAkB,CAAC,KAAK,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMsC,KAAK,GAAG;IACVzC,IAAI;IACJE,eAAe;IACfE,OAAO;IACPmB,KAAK;IACLc,QAAQ;IACRjB;EACJ,CAAC;EAED,oBACI7B,OAAA,CAACC,WAAW,CAACkD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3C,QAAA,EAC9BA;EAAQ;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC/C,GAAA,CA9JWF,YAAY;AAAAkD,EAAA,GAAZlD,YAAY;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}